@page "/createquestion"

<EditForm Model="@question" OnValidSubmit="AddQuestion" class="container w-50">
    <DataAnnotationsValidator />
    <fieldset>
        <div class="form-group">
            <label for="input" class="form-label mt-4">Title</label>
            <InputText @bind-Value="question.Title" class="form-control" id="input" style="resize:none" />
            <ValidationMessage For="(() => question.Title)" />
        </div>
        <div class="form-group ">
            <label for="textarea" class="form-label mt-4">Content</label>
            <InputTextArea @bind-Value="question.Content" class="form-control" id="textarea" rows="3" style="resize:none"></InputTextArea>
            <ValidationMessage For="(() => question.Content)" />
        </div>
        <div class="form-group mb-3">
            <label for="textarea" class="form-label mt-4">Image</label><br />
            <img src="@question.Image" style="width:200px;height:200px;" /><br />
            <CascadingValue Value="@question.Image">
                <InputFile OnChange="OnInputFileChanged" multiple></InputFile>
            </CascadingValue>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary w-25">Add</button>
            <input @onclick="QuestionNav" class="btn btn-success w-25" value="Back" />
        </div>
    </fieldset>
</EditForm>

@code {
    @inject IRepository<Question> _questionRepository;
    @inject IWebHostEnvironment _hostEnvironment;
    @inject NavigationManager navManager;

    private Question question = new();

    public async Task AddQuestion()
    {
        await _questionRepository.AddAsync(question);
        navManager.NavigateTo("/questions");
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        string webRootPath = _hostEnvironment.WebRootPath; // Get path to wwwroot
        var files = e.GetMultipleFiles();
        string fileName = Path.GetRandomFileName(); // Give the file(s) a random name
        var uploads = Path.Combine(webRootPath, @"images"); // Get path to wwwroot\images
        var extension = Path.GetExtension(files[0].Name); // Get the extension for the file(s)
        long newSize = 500000000;

        using (var fileStream = new FileStream(Path.Combine(uploads, fileName + extension), FileMode.Create))
        {
            await files[0].OpenReadStream(newSize).CopyToAsync(fileStream);
        }

        question.Image = @"\images\" + fileName + extension; // Set image property to the new files path
    }

    public void QuestionNav()
    {
        DeleteImage(); // When navigating back, the image must be deleted from the server
        navManager.NavigateTo("/questions");
    }

    public void DeleteImage()
    {
        string webRootPath = _hostEnvironment.WebRootPath; // Get path to wwwroot
        var imagePath = Path.Combine(webRootPath, question.Image.TrimStart('\\')); // Get the current image property path
        if (System.IO.File.Exists(imagePath)) // If the file exists in wwwroot\images
        {
            System.IO.File.Delete(imagePath); // Delete the file
        }
    }
}