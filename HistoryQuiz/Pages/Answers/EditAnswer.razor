@page "/editanswer/{id}"

<EditForm Model="@answer" OnValidSubmit="UpdateAnswer" class="container">
    <DataAnnotationsValidator />
    <fieldset>
        <div class="form-group">
            <label for="textarea" class="form-label mt-4">Content</label>
            <InputTextArea @bind-Value="answer.Content" class="form-control" id="textarea" rows="3" style="resize:none"></InputTextArea>
            <ValidationMessage For="(() => answer.Content)" />
        </div>

        <div class="form-group mb-3">
            <label for="textarea" class="form-label mt-4">Correct Answer?</label>
            <InputSelect @bind-Value="answer.IsCorrect" class="form-control">
                <option value="True">Correct Answer</option>
                <option value="False">Wrong Answer</option>
            </InputSelect>
        </div>

        <div class="form-group mt-4">
            <button type="submit" class="btn btn-primary w-25 me-2">Update</button>
            <NavLink class="btn btn-success w-25" href=@($"/editquestion/{@answer.QuestionId}")>Back</NavLink>
        </div>
    </fieldset>
</EditForm>

@code {
    @inject IRepository<Answer> _answerRepository;
    @inject NavigationManager navManager;

    [Parameter] public string Id { get; set; }
    private Answer answer = new();

    protected override async Task OnInitializedAsync()
    {
        answer = await _answerRepository.GetByIdAsync(int.Parse(Id));
    }

    public async Task UpdateAnswer()
    {
        await _answerRepository.UpdateAsync(answer);
        navManager.NavigateTo($"/question/{answer.QuestionId}");
    }
}