@page "/createanswer"

<EditForm Model="@answer" OnValidSubmit="AddAnswer" class="container w-50">
    <DataAnnotationsValidator />
    <fieldset>
        <div class="form-group">
            <label for="textarea" class="form-label mt-4">Content</label>
            <InputTextArea @bind-Value="answer.Content" class="form-control" id="textarea" rows="3" style="resize:none"></InputTextArea>
            <ValidationMessage For="@(() => answer.Content)" />
        </div>

        <div class="form-group mb-3">
            <label for="textarea" class="form-label mt-4">Question</label>
            @if (questions == null)
            {
                <span>Loading...</span>
            }
            else
            {
                <InputSelect @bind-Value="answer.QuestionId" class="form-control">
                    @foreach (var question in questions)
                    {
                    <option value="@question.Id">@question.Title</option>
                    }
            </InputSelect>
            }
        </div>

        <div class="form-group mb-3">
            <label for="textarea" class="form-label mt-4">Correct Answer?</label>
            <InputSelect @bind-Value="answer.IsCorrect" class="form-control">
                <option value="True">Correct Answer</option>
                <option value="False">Wrong Answer</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary w-25 me-2">Add</button>
            <NavLink class="btn btn-success w-25" href="/answers">Back</NavLink>
        </div>
    </fieldset>
</EditForm>

@code {
    @inject IRepository<Answer> _answerRepository;
    @inject IRepository<Question> _questionRepository;
    @inject NavigationManager navManager;

    private Answer answer = new();
    private IEnumerable<Question> questions;

    protected override async Task OnInitializedAsync()
    {
        questions = await _questionRepository.GetAllAsync();
    }

    public async Task AddAnswer()
    {
        await _answerRepository.AddAsync(answer);
        navManager.NavigateTo("/answers");
    }
}