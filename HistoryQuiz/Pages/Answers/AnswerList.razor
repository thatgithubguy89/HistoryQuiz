@page "/answers"

@if (answers == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        <NavLink class="btn btn-primary mt-2" href="/createanswer">Create Answer</NavLink>
    </div>
    <table class="table table-hover container text-center">
        <thead>
            <tr>
                <th scope="col">Content</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var answer in answers)
            {
                <tr class="table-light">
                    <td>@answer.Content.Substring(0, 3)...</td>
                    <td>
                        <button @onclick="(() => EditNav(answer.Id))" class="btn btn-primary w-25 me-2">Edit</button>
                        <button @onclick="(() => DeleteNav(answer.Id))" class="btn btn-danger w-25 me-2">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    @inject IAnswerRepository _answerRepository;
    @inject ILogger<AnswerList> _logger;
    @inject NavigationManager _navManager;

    [Parameter] public string Id { get; set; }
    private IEnumerable<Answer> answers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            answers = await _answerRepository.GetAllAnswersAsync(); // Store all the answers
        }
        catch (Exception ex)
        {
            _logger.LogError("Failed to access all answers. Component: AnswerList Method: OnInitializedAsync\n", ex);
        }
    }

    public void EditNav(int id)
    {
        _navManager.NavigateTo($"/editanswer/{id}");
    }

    public void DeleteNav(int id)
    {
        _navManager.NavigateTo($"/deleteanswer/{id}");
    }
}